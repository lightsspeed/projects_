# .env file (create this in your project root)
# AWS Configuration
AWS_ACCESS_KEY_ID=AKIAZI2LI6MQ627KS7Y3
AWS_SECRET_ACCESS_KEY=sFc1zvJJNn+mpAVogzplaUdzk1OO66vpX3yFIqgD
AWS_REGION=ap-south-1
AWS_S3_BUCKET=fileuploadwebapp

# Server Configuration
NODE_ENV=production
PORT=3001
FRONTEND_URL=http://localhost:3001

# # Security
SESSION_SECRET=3f7a9b2c8e1d4f6a0c9b3e8d7a2f5c1e9b4d6f8a3c2e1b7d9f4a6c8e2b1d3f5
# JWT_SECRET=your_jwt_secret_here

REDIS_HOST=redis
REDIS_PORT=6379

# # Optional: Database Configuration (for logging)
# DB_HOST=localhost
# DB_USER=your_db_user
# DB_PASSWORD=your_db_password
# DB_NAME=file_upload_logs

# # Optional: Email Configuration (for notifications)
# EMAIL_SERVICE=gmail
# EMAIL_USER=your_email@gmail.com
# EMAIL_PASS=your_app_password

# # ============================================
# # package.json
# {
#   "name": "secure-file-upload-s3",
#   "version": "1.0.0",
#   "description": "Secure file upload service with AWS S3 encryption",
#   "main": "server.js",
#   "scripts": {
#     "start": "node server.js",
#     "dev": "nodemon server.js",
#     "test": "jest",
#     "build": "npm install --production"
#   },
#   "dependencies": {
#     "express": "^4.18.2",
#     "multer": "^1.4.5-lts.1",
#     "aws-sdk": "^2.1490.0",
#     "cors": "^2.8.5",
#     "helmet": "^7.1.0",
#     "express-rate-limit": "^7.1.5",
#     "dotenv": "^16.3.1",
#     "crypto": "^1.0.1",
#     "path": "^0.12.7",
#     "uuid": "^9.0.1"
#   },
#   "devDependencies": {
#     "nodemon": "^3.0.1",
#     "jest": "^29.7.0",
#     "supertest": "^6.3.3"
#   },
#   "keywords": [
#     "file-upload",
#     "aws-s3",
#     "encryption",
#     "secure",
#     "nodejs"
#   ],
#   "author": "Your Name",
#   "license": "MIT",
#   "engines": {
#     "node": ">=16.0.0"
#   }
# }

# # ============================================
# # AWS S3 Bucket Policy (JSON)
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Sid": "AllowSecureUploadAccess",
#       "Effect": "Allow",
#       "Principal": {
#         "AWS": "arn:aws:iam::YOUR_ACCOUNT_ID:user/YOUR_IAM_USER"
#       },
#       "Action": [
#         "s3:GetObject",
#         "s3:PutObject",
#         "s3:DeleteObject"
#       ],
#       "Resource": "arn:aws:s3:::your-secure-upload-bucket/encrypted-uploads/*",
#       "Condition": {
#         "StringEquals": {
#           "s3:x-amz-server-side-encryption": "AES256"
#         }
#       }
#     },
#     {
#       "Sid": "AllowListingEncryptedFolder",
#       "Effect": "Allow",
#       "Principal": {
#         "AWS": "arn:aws:iam::YOUR_ACCOUNT_ID:user/YOUR_IAM_USER"
#       },
#       "Action": "s3:ListBucket",
#       "Resource": "arn:aws:s3:::your-secure-upload-bucket",
#       "Condition": {
#         "StringLike": {
#           "s3:prefix": "encrypted-uploads/*"
#         }
#       }
#     }
#   ]
# }

# # ============================================
# # IAM Policy for S3 Access (JSON)
# {
#   "Version": "2012-10-17",
#   "Statement": [
#     {
#       "Sid": "S3BucketAccess",
#       "Effect": "Allow",
#       "Action": [
#         "s3:GetBucketLocation",
#         "s3:ListBucket"
#       ],
#       "Resource": "arn:aws:s3:::your-secure-upload-bucket"
#     },
#     {
#       "Sid": "S3ObjectAccess",
#       "Effect": "Allow",
#       "Action": [
#         "s3:GetObject",
#         "s3:PutObject",
#         "s3:DeleteObject",
#         "s3:PutObjectAcl"
#       ],
#       "Resource": "arn:aws:s3:::your-secure-upload-bucket/*"
#     },
#     {
#       "Sid": "S3EncryptionAccess",
#       "Effect": "Allow",
#       "Action": [
#         "s3:PutEncryptionConfiguration",
#         "s3:GetEncryptionConfiguration"
#       ],
#       "Resource": "arn:aws:s3:::your-secure-upload-bucket"
#     }
#   ]
# }



# # # ============================================
# # # docker-compose.yml
# # version: '3.8'

# # services:
# #   secure-upload-app:
# #     build: .
# #     ports:
# #       - "3000:3000"
# #     environment:
# #       - NODE_ENV=production
# #     env_file:
# #       - .env
# #     volumes:
# #       - ./logs:/app/logs
# #     restart: unless-stopped
# #     networks:
# #       - secure-upload-network

# #   # Optional: Redis for session storage
# #   redis:
# #     image: redis:7-alpine
# #     ports:
# #       - "6379:6379"
# #     volumes:
# #       - redis_data:/data
# #     restart: unless-stopped
# #     networks:
# #       - secure-upload-network

# #   # Optional: PostgreSQL for logging
# #   postgres:
# #     image: postgres:15-alpine
# #     environment:
# #       POSTGRES_DB: file_upload_logs
# #       POSTGRES_USER: upload_user
# #       POSTGRES_PASSWORD: secure_password
# #     volumes:
# #       - postgres_data:/var/lib/postgresql/data
# #       - ./init.sql:/docker-entrypoint-initdb.d/init.sql
# #     ports:
# #       - "5432:5432"
# #     restart: unless-stopped
# #     networks:
# #       - secure-upload-network

# # volumes:
# #   redis_data:
# #   postgres_data:

# # networks:
# #   secure-upload-network:
# #     driver: bridge

# # ============================================
# # AWS CLI Setup Commands

# # Create S3 bucket with encryption
# aws s3 mb s3://your-secure-upload-bucket --region us-east-1

# # Enable default encryption on bucket
# aws s3api put-bucket-encryption \
#   --bucket fileuploadapp213 \
#   --server-side-encryption-configuration '{
#     "Rules": [
#       {
#         "ApplyServerSideEncryptionByDefault": {
#           "SSEAlgorithm": "AES256"
#         },
#         "BucketKeyEnabled": true
#       }
#     ]
#   }'

# # Enable versioning
# aws s3api put-bucket-versioning \
#   --bucket your-secure-upload-bucket \
#   --versioning-configuration Status=Enabled

# # Enable logging
# aws s3api put-bucket-logging \
#   --bucket your-secure-upload-bucket \
#   --bucket-logging-status '{
#     "LoggingEnabled": {
#       "TargetBucket": "your-secure-upload-bucket",
#       "TargetPrefix": "access-logs/"
#     }
#   }'

# # Set lifecycle policy to delete old files
# aws s3api put-bucket-lifecycle-configuration \
#   --bucket your-secure-upload-bucket \
#   --lifecycle-configuration '{
#     "Rules": [
#       {
#         "ID": "DeleteOldUploads",
#         "Status": "Enabled",
#         "Filter": {
#           "Prefix": "encrypted-uploads/"
#         },
#         "Expiration": {
#           "Days": 30
#         }
#       }
#     ]
#   }'

# # ============================================
# # Nginx Configuration (optional reverse proxy)

# # /etc/nginx/sites-available/secure-upload
# server {
#     listen 80;
#     server_name your-domain.com;
    
#     # Redirect HTTP to HTTPS
#     return 301 https://$server_name$request_uri;
# }

# server {
#     listen 443 ssl http2;
#     server_name your-domain.com;
    
#     # SSL Configuration
#     ssl_certificate /path/to/ssl/cert.pem;
#     ssl_certificate_key /path/to/ssl/private.key;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;
#     ssl_prefer_server_ciphers off;
    
#     # Security headers
#     add_header X-Frame-Options DENY;
#     add_header X-Content-Type-Options nosniff;
#     add_header X-XSS-Protection "1; mode=block";
#     add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    
#     # File upload size limit
#     client_max_body_size 100M;
    
#     # Proxy to Node.js app
#     location / {
#         proxy_pass http://localhost:3000;
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection 'upgrade';
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_cache_bypass $http_upgrade;
        
#         # Timeout settings
#         proxy_connect_timeout 60s;
#         proxy_send_timeout 60s;
#         proxy_read_timeout 60s;
#     }
# }

